Serial Port Service
============

The Serial Port Service is used to use the serial port on the device. you may write or read on this serial port. Configuration is optional, since the server automatically does a default configuration.

This implementation does not handles errors. See [services](services.md) to learn how to implement error handling in this wrapper.

### Instantiation

~~~~{.java}
String host = "localhost";
int port = 50051;

final MannagedChannel channel = ManagedChannelBuilder.forAddress(host, port).usePlaintext(true).build();
final BLink_SerialPort serialPortService =  = new BLink_SerialPort(channel);
~~~~

---------------------------------

### Methods

#### uint64 Read():

The Read method is used to read on the serial port of the device.

- param  :
         + String deviceName : Name of the device we want to read from.
- return : 
         + java.util.List<char> : All the bytes that were read.
		 
#### void Write(String deviceName, java.util.List<char> data):

The GSetTime method is used to gset the time on the device (unix timestamp).

- param  : 
         + String deviceName : Name of the device we want to write to.
		 + java.util.List<char> data : All the bytes that we want to write.
- return : None

#### void Config(String deviceName, String devicePath, int baudrate, String parity, int charSize, String stopBits, String flowControl)

The Config method is used to configure the serial port on the device.

- param : 
        + String deviceName : Name of the device we want to configure.
        + String devicePath : Path to the device we want to configure.
		+ int baudrate : Baudrate of the device we want to configure.
		+ String parity : Parity of the device we want to configure.
		+ int charSize : Character size of the device we want to configure.
		+ String stopBits : Stop bit of the device we want to configure.
		+ String flowControl :
- return : None

---------------------------------

### Constants

#### Default Configurations

**Path :** /dev/ttymxc1
**Baudrate :** 115200
**Parity :** none
**Character size :** 8
**Flow control :** none
**Stop bits :** one

---------------------------------

### Example

This is a short example only covering the basic operations.<br>
For a more robust and detailed implementation, go see the example project file BLink_SerialPort_example.java

~~~~{.java}
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;

public class BLink_SerialPort_example {

  String host = "localhost";
  int port = 50051;

  public void testGPIO() {
    final MannagedChannel channel = ManagedChannelBuilder.forAddress(host, port).usePlaintext(true).build();
    final BLink_SerialPort serialPortService =  = new BLink_SerialPort(channel);
    
	try {
	  
	  
      // RTC Set Example
      serialPortService.Write("SerialDevice", data);  // 6 june 2018

      // RTC Get Example
      data = serialPortService.read();
	  System.out.print(data);
			
    } finally {
      channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);
    }
  }
}
~~~~

---------------------------------

[Return to BLink services](blinkServices.md)