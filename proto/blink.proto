syntax = "proto3";

option java_multiple_files = true;
option java_outer_classname = "BLink";

package blink_grpc;

// ======== Gpio Protocol ========
service Gpio_Service {
    rpc Gpio_Set (Gpio_Set_Request) returns (Gpio_Set_Reply) {}
    rpc Gpio_Get (Gpio_Get_Request) returns (Gpio_Get_Reply) {}
    rpc Gpio_StartStreaming (Gpio_StartStreaming_Request) returns (stream Gpio_StartStreaming_Reply) {}
    rpc Gpio_StopStreaming (Gpio_StopStreaming_Request) returns (Gpio_StopStreaming_Reply) {}
}

message Gpio_Set_Request {
    string name = 1;
    bool requestedState = 2;
}

message Gpio_Set_Reply {
}

message Gpio_Get_Request {
    string name  = 1;
}

message Gpio_Get_Reply {
    bool value = 1;
}

message Gpio_StartStreaming_Request {
    string name  = 1;
    string edge = 2;
}

message Gpio_StartStreaming_Reply {
    bool value = 1;
}

message Gpio_StopStreaming_Request {
    string name  = 1;
}

message Gpio_StopStreaming_Reply {
}

// ======== Network Protocol ========
service Network_Service {
    rpc Network_AddConnection(Network_AddConnection_Request) returns (Network_AddConnection_Reply) {}
    rpc Network_RemoveConnection(Network_RemoveConnection_Request) returns (Network_RemoveConnection_Reply) {}
    rpc Network_GetConnections(Network_GetConnections_Request) returns (Network_GetConnections_Reply) {}
    rpc Network_GetConnectionSettings(Network_GetConnectionSettings_Request) returns (Network_GetConnectionSettings_Reply) {}
    rpc Network_GetState(Network_GetState_Request) returns (Network_GetState_Reply) {}
}

message Network_AddConnection_Request {
    string json_settings = 1;
    bool saveToDisk = 2;
}

message Network_AddConnection_Reply {
}

message Network_GetState_Request {
}

message Network_GetState_Reply {    
    uint32 networkState = 1;
}

message Network_GetConnections_Request {
}

message Network_GetConnections_Reply {    
    repeated string connectionId = 1;
}

message Network_GetConnectionSettings_Request {
    string connectionId = 1;
}

message Network_GetConnectionSettings_Reply {    
    string json_settings = 1;
}

message Network_RemoveConnection_Request {    
    string connectionId = 1;
}

message Network_RemoveConnection_Reply {    
    bool connectionRemoved = 1;
}

// ======== SerialPort Protocol ========
service SerialPort_Service {
    rpc SerialPort_Read(SerialPort_Read_Request) returns (stream SerialPort_Read_Reply) {}
    rpc SerialPort_Write(SerialPort_Write_Request) returns (SerialPort_Write_Reply) {}
    rpc SerialPort_StopReading(SerialPort_StopReading_Request) returns (SerialPort_StopReading_Reply) {}
    rpc SerialPort_Config(SerialPort_Config_Request) returns (SerialPort_Config_Reply) {} 
}

message SerialPort_Write_Request {
    string deviceName = 1;
    bytes data = 2;
    string mode = 3;
}

message SerialPort_Write_Reply {
}

message SerialPort_Read_Request {
    string deviceName = 1;
    string mode = 2;
}

message SerialPort_Read_Reply {    
    bytes data = 1;
}

message SerialPort_StopReading_Request {
    string deviceName = 1;
}

message SerialPort_StopReading_Reply {
}

message SerialPort_Config_Request {  
    string deviceName  = 1;
    int32  baudrate    = 2;
    string parity      = 3;
    int32  charSize    = 4;
    string flowControl = 5;
    string stopBits    = 6;
}

message SerialPort_Config_Reply {    
}

// ======== BitPipe Protocol ========
service BitPipe_Service {
    rpc BitPipe_GetStatus(BitPipe_GetStatus_Request) returns (BitPipe_GetStatus_Reply) {}
    rpc BitPipe_SetAPN(BitPipe_SetAPN_Request) returns (BitPipe_SetAPN_Reply) {}
    rpc BitPipe_GetAPN(BitPipe_GetAPN_Request) returns (BitPipe_GetAPN_Reply) {}
    rpc BitPipe_SetRadioPower(BitPipe_SetRadioPower_Request) returns (BitPipe_SetRadioPower_Reply) {}
    rpc BitPipe_Connect(BitPipe_Connect_Request) returns (BitPipe_Connect_Reply) {}
    rpc BitPipe_Disconnect(BitPipe_Disconnect_Request) returns (BitPipe_Disconnect_Reply) {}
    rpc BitPipe_GetInfo(BitPipe_GetInfo_Request) returns (BitPipe_GetInfo_Reply) {}
}

message BitPipe_GetStatus_Request {
}

message BitPipe_GetStatus_Reply {
    string status_json = 1;
}

message BitPipe_GetInfo_Request {
}

message BitPipe_GetInfo_Reply {
    string info_json = 1;
}

message BitPipe_SetAPN_Request {
    string apn = 1;
}

message BitPipe_SetAPN_Reply {
}

message BitPipe_GetAPN_Request {
}

message BitPipe_GetAPN_Reply {
    string apn = 1;
}

message BitPipe_SetRadioPower_Request {
}

message BitPipe_SetRadioPower_Reply {
}

message BitPipe_Connect_Request {
}

message BitPipe_Connect_Reply {
}

message BitPipe_Disconnect_Request {
}

message BitPipe_Disconnect_Reply {
}


// ======== Network.Wifi Protocol ========
service Wifi_Service {
    rpc Wifi_GetAccessPoints(Wifi_GetAccessPoints_Request) returns (Wifi_GetAccessPoints_Reply) {}
    rpc Wifi_AddSimpleConnection(Wifi_AddSimpleConnection_Request) returns (Wifi_AddSimpleConnection_Reply) {}
    rpc Wifi_GetConnections(Wifi_GetConnections_Request) returns (Wifi_GetConnections_Reply) {}
    rpc Wifi_Connect(Wifi_Connect_Request) returns (Wifi_Connect_Reply) {}
    rpc Wifi_RemoveConnection(Wifi_RemoveConnection_Request) returns (Wifi_RemoveConnection_Reply) {}
    rpc Wifi_SetAutoConnect(Wifi_SetAutoConnect_Request) returns (Wifi_SetAutoConnect_Reply) {}
}

message Wifi_GetAccessPoints_Request {
}

message Wifi_GetAccessPoints_Reply {
    message AccessPoint {
        string ssid = 1;
        uint32 signalQuality = 2;
    }
    repeated AccessPoint accessPoint = 2;
}

message Wifi_AddSimpleConnection_Request {
    string connectionId = 1;
    string ssid = 2;
    string psk = 3;
    bool persistent = 4;
}

message Wifi_AddSimpleConnection_Reply {
}

message Wifi_GetConnections_Request {
}

message Wifi_GetConnections_Reply {
    repeated string connectionId = 1;
}

message Wifi_Connect_Request {
    string connectionId = 1;
}

message Wifi_Connect_Reply {
}

message Wifi_RemoveConnection_Request {
    string connectionId = 1;
}

message Wifi_RemoveConnection_Reply {
    bool connectionRemoved = 1;
}

message Wifi_SetAutoConnect_Request {
    bool value = 1;
}

message Wifi_SetAutoConnect_Reply {
}


// ======== RTC Protocol ========
service RTC_Service {
    rpc RTC_GetTime(RTC_GetTime_Request) returns (RTC_GetTime_Reply) {}
    
    // NTP service will automatically update the time with a valid internet connection
    rpc RTC_SetTime(RTC_SetTime_Request) returns (RTC_SetTime_Reply) {}
}

message RTC_GetTime_Request {
}

message RTC_GetTime_Reply {
    uint64 unixTimestamp = 1;
}

message RTC_SetTime_Request {
    uint64 unixTimestamp = 1;
}

message RTC_SetTime_Reply {
}

// ======== Accelerometer Protocol ========
service Accelerometer_Service {
    rpc Accelerometer_Get_Samples (Accelerometer_Get_Samples_Request) returns (Accelerometer_Get_Samples_Reply) {}
    rpc Accelerometer_Set_Data_Rate(Accelerometer_Set_Data_Rate_Request) returns (Accelerometer_Set_Data_Rate_Reply) {}
    rpc Accelerometer_Set_Range(Accelerometer_Set_Range_Request) returns (Accelerometer_Set_Range_Reply) {}
    rpc Accelerometer_Set_Trigger(Accelerometer_Set_Trigger_Request) returns (Accelerometer_Set_Trigger_Reply) {}
    rpc Accelerometer_Start_Monitoring (Accelerometer_Start_Monitoring_Request) returns (Accelerometer_Start_Monitoring_Reply) {}
    rpc Accelerometer_Start_Trigger (Accelerometer_Start_Trigger_Request) returns (Accelerometer_Start_Trigger_Reply) {}
    rpc Accelerometer_Stop_Monitoring (Accelerometer_Stop_Monitoring_Request) returns (Accelerometer_Stop_Monitoring_Reply) {}
    rpc Accelerometer_Stop_Trigger (Accelerometer_Stop_Trigger_Request) returns (Accelerometer_Stop_Trigger_Reply) {}
}

message Accelerometer_Get_Samples_Reply {
    repeated double xAxis = 1;
    repeated double yAxis = 2;
    repeated double zAxis = 3;
    repeated uint64 timestamp = 4;
}

message Accelerometer_Get_Samples_Request {
}

message Accelerometer_Set_Data_Rate_Reply {
}

message Accelerometer_Set_Data_Rate_Request {
    int32 dataRate = 1;
}

message Accelerometer_Set_Range_Reply {
}

message Accelerometer_Set_Range_Request {
    int32 axisRange = 1;
}

message Accelerometer_Set_Trigger_Reply {
}

message Accelerometer_Set_Trigger_Request {
    int32 thsX = 1;
    int32 thsY = 2;
    int32 thsZ = 3;
    int32 dur = 4;
    int32 conf = 5;
}

message Accelerometer_Start_Monitoring_Reply {
}

message Accelerometer_Start_Monitoring_Request {
}

message Accelerometer_Start_Trigger_Reply {
}

message Accelerometer_Start_Trigger_Request {
}

message Accelerometer_Stop_Monitoring_Reply {
}

message Accelerometer_Stop_Monitoring_Request {
}

message Accelerometer_Stop_Trigger_Reply {
}

message Accelerometer_Stop_Trigger_Request {
}

// ======== Wiegand Protocol ========
service Wiegand_Service {
    rpc Wiegand_Read(Wiegand_Read_Request) returns (stream Wiegand_Read_Reply) {}
    rpc Wiegand_StopReading(Wiegand_StopReading_Request) returns (Wiegand_StopReading_Reply) {}
}

message Wiegand_Read_Request {
    string deviceName = 1;
}

message Wiegand_Read_Reply {    
    int64 data = 1;
}

message Wiegand_StopReading_Request {
    string deviceName = 1;
}

message Wiegand_StopReading_Reply {
}


// ======== OneWire Protocol ========
service OneWire_Service {
    rpc OneWire_Write(OneWire_Write_Request) returns (OneWire_Write_Reply) {}
    rpc OneWire_Triplet(OneWire_Triplet_Request) returns (OneWire_Triplet_Reply) {}
    rpc OneWire_Read(OneWire_Read_Request) returns (OneWire_Read_Reply) {}
    rpc OneWire_PowerOff(OneWire_PowerOff_Request) returns (OneWire_PowerOff_Reply) {}
    rpc OneWire_PowerOn(OneWire_PowerOn_Request) returns (OneWire_PowerOn_Reply) {}
    rpc OneWire_AdjustPort(OneWire_AdjustPort_Request) returns (OneWire_AdjustPort_Reply) {}
    rpc OneWire_GetStatus(OneWire_GetStatus_Request) returns (OneWire_GetStatus_Reply) {}
    rpc OneWire_SetOverdriveSpeed(OneWire_SetOverdriveSpeed_Request) returns (OneWire_SetOverdriveSpeed_Reply) {}
    rpc OneWire_Reset(OneWire_Reset_Request) returns (OneWire_Reset_Reply) {}
    rpc OneWire_SetRegister(OneWire_SetRegister_Request) returns (OneWire_SetRegister_Reply) {}
    rpc OneWire_GetRegister(OneWire_GetRegister_Request) returns (OneWire_GetRegister_Reply) {}
}

message OneWire_Write_Request {
    int32 data = 2;
    string mode = 3;
}

message OneWire_Write_Reply {
}

message OneWire_Triplet_Request {
    bool direction = 2;
}

message OneWire_Triplet_Reply {
    bool power = 1;
    bool overdrive = 2;
    bool strongPullUp = 3;
    bool activePullUp = 4;
    bool pulseDetected = 5;
    bool logicLevel = 6;
    bool oneWireBusy = 7;
    bool shortDetected = 8;
    bool deviceReset = 9;
    bool singleBitResult = 10;
    bool tripletSecondBit = 11;
    bool branchDir = 12;
}

message OneWire_Read_Request {
    int32 numberOfBytes = 2;
}

message OneWire_Read_Reply {
    repeated int32 data = 1;
}

message OneWire_PowerOff_Request {
}

message OneWire_PowerOff_Reply {
}

message OneWire_PowerOn_Request {
}

message OneWire_PowerOn_Reply {
}

message OneWire_AdjustPort_Request {
    int32 data =2;
}

message OneWire_AdjustPort_Reply {
    int32 value =1;
}

message OneWire_GetStatus_Request {
}

message OneWire_GetStatus_Reply {
    bool power = 1;
    bool overdrive = 2;
    bool strongPullUp = 3;
    bool activePullUp = 4;
    bool pulseDetected = 5;
    bool logicLevel = 6;
    bool oneWireBusy = 7;
    bool shortDetected = 8;
    bool deviceReset = 9;
    bool singleBitResult = 10;
    bool tripletSecondBit = 11;
    bool branchDir = 12;
}

message OneWire_SetOverdriveSpeed_Request {
    bool overdrive = 2;
}

message OneWire_SetOverdriveSpeed_Reply {
}

message OneWire_Reset_Request {
}

message OneWire_Reset_Reply {
}

message OneWire_SetRegister_Request {
    int32 reg = 2;
    int32 data = 3;
}

message OneWire_SetRegister_Reply {
}

message OneWire_GetRegister_Request {
    int32 reg = 2;
}

message OneWire_GetRegister_Reply {
    int32 value = 1;
}

// ======== SkyhawkMezz Protocol ========
service SkyHawkMezz_Service {
    rpc SkyHawkMezz_GetAnalogInputs (SkyHawkMezz_GetAnalogInputs_Request)  returns (SkyHawkMezz_GetAnalogInputs_Reply) {}
    rpc SkyHawkMezz_AnalogDiffCtrl  (SkyHawkMezz_AnalogDiffCtrl_Request)   returns (SkyHawkMezz_AnalogDiffCtrl_Reply) {}
    rpc SkyHawkMezz_GetFWVersion    (SkyHawkMezz_GetFWVersion_Request)     returns (SkyHawkMezz_GetFWVersion_Reply) {}
    rpc SkyHawkMezz_GetHWVersion    (SkyHawkMezz_GetHWVersion_Request)     returns (SkyHawkMezz_GetHWVersion_Reply) {}
    rpc SkyHawkMezz_UpdateFW        (SkyHawkMezz_UpdateFW_Request)         returns (SkyHawkMezz_UpdateFW_Reply) {}
    rpc SkyHawkMezz_Detect          (SkyHawkMezz_Detect_Request)           returns (SkyHawkMezz_Detect_Reply) {}
}

message SkyHawkMezz_GetAnalogInputs_Request {
}

message SkyHawkMezz_GetAnalogInputs_Reply {
    uint32 AnalogInput_1 = 1;
    uint32 AnalogInput_2 = 2;
    uint32 AnalogInput_3 = 3;
    uint32 AnalogInput_4 = 4;
    uint32 AnalogDiff_1  = 5;
    uint32 AnalogDiff_2  = 6;
}

message SkyHawkMezz_AnalogDiffCtrl_Request {
    // Nullable
    oneof enableDiff1_oneof {
        bool enableDiff1 = 1;
    }
    
    // Nullable
    oneof enableDiff2_oneof {
        bool enableDiff2 = 2;
    }
}

message SkyHawkMezz_AnalogDiffCtrl_Reply {
}

message SkyHawkMezz_UpdateFW_Request {
    string filePath = 1;
}

message SkyHawkMezz_UpdateFW_Reply {
    bool success = 1;
}

message SkyHawkMezz_GetFWVersion_Request {
}

message SkyHawkMezz_GetFWVersion_Reply {
    string fwVersion = 1;
}

message SkyHawkMezz_GetHWVersion_Request {
}

message SkyHawkMezz_GetHWVersion_Reply {
    int32 hwVersion = 1;
}

message SkyHawkMezz_Detect_Request {
}

message SkyHawkMezz_Detect_Reply {
    bool value = 1;
}

// ======== SkyHawkMisc Protocol ========
service SkyHawkMisc_Service {
    rpc WiegandEN_OneWireDIS_Set(WiegandEN_OneWireDIS_Set_Request) returns (WiegandEN_OneWireDIS_Set_Reply) {}
    rpc WiegandEN_OneWireDIS_Get(WiegandEN_OneWireDIS_Get_Request) returns (WiegandEN_OneWireDIS_Get_Reply) {}
    rpc WWANAntennaEN_Set(WWANAntennaEN_Set_Request) returns (WWANAntennaEN_Set_Reply) {}
    rpc WWANAntennaEN_Get(WWANAntennaEN_Get_Request) returns (WWANAntennaEN_Get_Reply) {}
    rpc PoEEN_Set(PoEEN_Set_Request) returns (PoEEN_Set_Reply) {}
    rpc PoEEN_Get(PoEEN_Get_Request) returns (PoEEN_Get_Reply) {}
    rpc MezzSerialMode_Set(MezzSerialMode_Set_Request) returns (MezzSerialMode_Set_Reply) {}
    rpc MezzSerialMode_Get(MezzSerialMode_Get_Request) returns (MezzSerialMode_Get_Reply) {}
}

message WiegandEN_OneWireDIS_Set_Request {
    bool requestedState = 1;
}

message WiegandEN_OneWireDIS_Set_Reply {
}

message WiegandEN_OneWireDIS_Get_Request {
}

message WiegandEN_OneWireDIS_Get_Reply {
    bool value = 1;
}

message WWANAntennaEN_Set_Request {
    bool requestedState = 1;
}

message WWANAntennaEN_Set_Reply {
}

message WWANAntennaEN_Get_Request {
}

message WWANAntennaEN_Get_Reply {
    bool value = 1;
}

message PoEEN_Set_Request {
    bool requestedState = 1;
}

message PoEEN_Set_Reply {
}

message PoEEN_Get_Request {
}

message PoEEN_Get_Reply {
    bool value = 1;
}

message MezzSerialMode_Set_Request {
    string mode = 1;
}

message MezzSerialMode_Set_Reply {
}

message MezzSerialMode_Get_Request {
}

message MezzSerialMode_Get_Reply {
    string value = 1;
}

// ======== SkyHawkPowerManager Protocol ========
service SkyHawkPowerManager_Service {
    rpc SkyHawkPmgr_GetRegister (SkyHawkPmgr_GetRegister_Request) returns (SkyHawkPmgr_GetRegister_Reply) {}
    rpc SkyHawkPmgr_SetRegister (SkyHawkPmgr_SetRegister_Request) returns (SkyHawkPmgr_SetRegister_Reply) {}
    rpc SkyHawkPmgr_UpdateFW (SkyHawkPmgr_UpdateFW_Request) returns (SkyHawkPmgr_UpdateFW_Reply) {}
    rpc SkyHawkPmgr_GetFWVersion (SkyHawkPmgr_GetFWVersion_Request) returns (SkyHawkPmgr_GetFWVersion_Reply) {}
    rpc SkyHawkPmgr_GetHWVersion (SkyHawkPmgr_GetHWVersion_Request) returns (SkyHawkPmgr_GetHWVersion_Reply) {}
}

message SkyHawkPmgr_GetRegister_Request {
    string regName = 1;
}

message SkyHawkPmgr_GetRegister_Reply {
    int32 value = 1;
}

message SkyHawkPmgr_SetRegister_Request {
    string regName = 1;
    int32 value = 2;
}

message SkyHawkPmgr_SetRegister_Reply {
}

message SkyHawkPmgr_UpdateFW_Request {
    string filePath = 1;
}

message SkyHawkPmgr_UpdateFW_Reply {
    bool success = 1;
}

message SkyHawkPmgr_GetFWVersion_Request {
}

message SkyHawkPmgr_GetFWVersion_Reply {
    string fwVersion = 1;
}

message SkyHawkPmgr_GetHWVersion_Request {
}

message SkyHawkPmgr_GetHWVersion_Reply {
    int32 hwVersion = 1;
}
